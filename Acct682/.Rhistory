for(i in 2:10){
S[i] = S[i-1] * exp((r - q - 0.5*sigma^2)*h+sigma*sqrt(h)*rnorm(1,0,1))
}
# Make Put Prices
bsPut = function(S, K, r, v, q, t){
d1 <- ((log(S/K) + (r - q + 0.5 * v * v) * t) / (v * sqrt(t)))
d2 <- (d1 - v * sqrt(t))
N1 <- pnorm(-d1)
N2 <- pnorm(-d2)
put = max((N2 * K * exp(-r*t) - N1 * S*exp(-q*t)))
return(put)
}
C = rep(0,10)
for(i in 1:10){
C[i] = bsPut(S[i], K, r, sigma, 0, h)
}
# Get Delta
delta = rep(0,10)
PutDelta = function(S, K, r, v, q, t){
d1 <- ((log(S/K) + (r - q + 0.5 * v * v) * t) / (v * sqrt(t)))
d2 <- (d1 - v * sqrt(t))
N1 <- pnorm(-d1)
N2 <- pnorm(-d2)
delta = exp(-q*t) * N1
return(delta)
}
for(i in 1:10){
delta[i] = PutDelta(S[i], K, r, sigma, 0, h)
}
costOfHedge = rep(0,10)
costOfHedge_pv = rep(0,10)
for(i in 2:10){
costOfHedge[i] = (S[i]*(delta[i] - delta[i-1]))
costOfHedge_pv[i] = costOfHedge[i] / (1+r)^(i/365)
}
if(S[length(S)] < K){
hedgeCost = - K + (1 + delta[length(delta)]) * S[length(S)] / (1+r)}
else{
hedgeCost = delta[length(delta)] * S[length(S)] / (1+r)}
costOfHedge_pv[length(costOfHedge_pv)] = hedgeCost
return(sum(costOfHedge_pv[2:10]))
}
# Change to 10000
sims = rep(0,10000)
for(i in 1:10000){
sims[i] = simulations(S, K, r, sigma, h, q)
}
mean(abs(sims))
bsPut(S[10], K, r, sigma, q, h/10)
# Simulate delta hedging
S = rep(0, 10)
S[1] = 40.0
K = 40.0
r = 0.10
sigma = 0.30
h = 1/365 / 10
q = 0
simulations = function(S, K, r, sigma, h, q){
# Make Security Prices
for(i in 2:10){
S[i] = S[i-1] * exp((r - q - 0.5*sigma^2)*h+sigma*sqrt(h)*rnorm(1,0,1))
}
# Make Put Prices
bsPut = function(S, K, r, v, q, t){
d1 <- ((log(S/K) + (r - q + 0.5 * v * v) * t) / (v * sqrt(t)))
d2 <- (d1 - v * sqrt(t))
N1 <- pnorm(-d1)
N2 <- pnorm(-d2)
put = max((N2 * K * exp(-r*t) - N1 * S*exp(-q*t)))
return(put)
}
C = rep(0,10)
for(i in 1:10){
C[i] = bsPut(S[i], K, r, sigma, 0, h)
}
# Get Delta
delta = rep(0,10)
PutDelta = function(S, K, r, v, q, t){
d1 <- ((log(S/K) + (r - q + 0.5 * v * v) * t) / (v * sqrt(t)))
d2 <- (d1 - v * sqrt(t))
N1 <- pnorm(-d1)
N2 <- pnorm(-d2)
delta = exp(-q*t) * N1
return(delta)
}
for(i in 1:10){
delta[i] = PutDelta(S[i], K, r, sigma, 0, h)
}
costOfHedge = rep(0,10)
costOfHedge_pv = rep(0,10)
for(i in 2:10){
costOfHedge[i] = (S[i]*(delta[i] - delta[i-1]))
costOfHedge_pv[i] = costOfHedge[i] / (1+r)^(i/365)
}
if(S[length(S)] < K){
hedgeCost = - K + (1 + delta[length(delta)]) * S[length(S)] / (1+r)}
else{
hedgeCost = delta[length(delta)] * S[length(S)] / (1+r)}
costOfHedge_pv[length(costOfHedge_pv)] = hedgeCost
return(sum(costOfHedge_pv[2:10]))
}
# Change to 10000
sims = rep(0,10000)
for(i in 1:10000){
sims[i] = simulations(S, K, r, sigma, h, q)
}
mean(sims)
bsPut(S[10], K, r, sigma, q, h/10)
(18.28 + 1.08*95 ) / (100 + 5.98)
12*6
12-36
72-24
24+72
install.packages("matrixcalc")
library(matrixcalc)
clear
A = matrix(c(2,-2,-6,6), nrow=2, ncol = 2)
A
is.positive.semi.definite(A)
is.indefinite(A)
A = matrix(c(2,-6,-6,6), nrow=2, ncol = 2)
is.positive.semi.definite(A)
is.indefinite(A)
14*6
84-36
A = matrix(c(14,-6,-6,6), nrow=2, ncol = 2)
is.positive.definite(A)
A = matrix(c(-10,-6,-6,6), nrow=2, ncol = 2)
is.indefinite(A)
32/14
3*16
48/7
48*5
48-35
A = matrix(c(2,-6,-6,4), nrow=2, ncol = 2)
A
is.indefinite(A)
-3 + 8*(-16/3 + 25/3)-21
6*48
288-14
A = matrix(c(2,6,0,6,2,-3,0,-3,8), nrow = 3, ncol = 3)
A
is.indefinite(A)
A = matrix(c(0,0,0,0), nrow = 2, ncol = 2)
is.negative.semi.definite(A)
is.positive.semi.definite()
is.positive.semi.definite(A)
pre = c(4.9,5.3,6.2,5.4,5.2)
post = c(4.6,3.8,5.7,4.9,5.1)
t.test(pre,post,paired = TRUE)
dat = data.frame(PRE = pre, POST = post)
mean(dat)
dat = data.frame(PRE = pre, POST = post)
dat
mean(dat)
mean(dat[,1] - dat[,2])
dat$sd = ( ((dat[,1]-dat[,2]) - meano)^2 / 4)
meano = mean(dat[,1] - dat[,2])
dat$sd = ( ((dat[,1]-dat[,2]) - meano)^2 / 4)
dat
dat$sd = sqrt( ((dat[,1]-dat[,2]) - meano)^2 / 4)
dat
ssq = ( ((dat[,1]-dat[,2]) - meano)^2)
ssq
ssq = sum( ((dat[,1]-dat[,2]) - meano)^2)
ssq
std = sqrt(ssq / 4)
effect = (mean(pre) - mean(post)) / std
effect
a = t.test(pre,post,paired = TRUE); a
imean = mean(dat[,1] - dat[,2])
theSum = sum(diff - diff_mean)
diff_mean = mean(pre) - mean(post)
diff = pre - post
theSum = sum((diff - diff_mean)^2)
std = sqrt(theSum / 4)
dist = 2*(diff_mean) / std
dist
hw = c(4.2,3.8,3.6,4.4,5.1,4.0)
nhw = c(5.5,5.7,6.0,5.6,6.6,6.2,6.8)
??levene
var(hw)
var(nhw)
.28/.25
.25/.28
?t.test()
t.test(hw, nhw, var.equal=TRUE)
t.test(hw,nhw)
seden = c(30.2,29.6,35.2,19.1,26.3,22.4)
semact = c(29.4, 17.6, 26.4, 25.3, 22.5, 28.6)
active = c(17.6, 13.4, 20.3, 19.6, 15.1, 10.7)
va = c(10.9, 13.7, 12.8, 14.7, 9.3, 12.7)
??anova
dat2 = data.frame(sed = seden, semact = semact, act = active, va = va)
summary(aov(dat2))
summary(anova(dat2))
seden = data.frame(Group = rep("sedentary",6), Data=c(30.2,29.6,35.2,19.1,26.3,22.4))
seden
semact = data.frame(Group = rep("semiactive",6), Data=c(29.4, 17.6, 26.4, 25.3, 22.5, 28.6))
active = data.frame(Group = rep("active",6), Data=c(17.6, 13.4, 20.3, 19.6, 15.1, 10.7))
va = data.frame(Group = rep("sedentary",6), Data=c(10.9, 13.7, 12.8, 14.7, 9.3, 12.7))
dat2 = rbind(seden, semact, active, va)
dat2
?levene.test
?leveneTest
library('Rcmdr')
library('car')
leveneTest(dat2, group = Group)
leveneTest(dat2[,2], group = Group)
leveneTest(c(seden, semact, active, va), group = Group)
leveneTest(c(seden, semact, active, va), group = dat2$Group)
seden
leveneTest(c(seden$Data, semact$Data, active$Data, va$Data), group = dat2$Group)
bartlett.test(c(seden$Data, semact$Data, active$Data, va$Data), group = dat2$Group)
?bartlett.test
bartlett.test(c(seden$Data, semact$Data, active$Data, va$Data), g = dat2$Group)
summary(bartlett.test(c(seden$Data, semact$Data, active$Data, va$Data), g = dat2$Group))
a=bartlett.test(c(seden$Data, semact$Data, active$Data, va$Data), g = dat2$Group)
c(seden$Data, semact$Data, active$Data, va$Data)
dat2$Group
dat2$Data
bartlett.test(dat2$Data, g = dat2$Group)
aov(lm(dat2$Data ~ dat2$Group))
aov(dat2$Data ~ dat2$Group)
summary(aov(dat2$Data ~ dat2$Group))
sd(seden)
ssd(seden$Data)
sd(seden$Data)
sd(semact$Data)
sd(active$Data)
sd(va$Data)
dat
dat2
dat3 = cbind(seden$Data, semact$Data, active$Data, va$Data)
dat3
?boxplot
boxplot(dat2$Data~dat2$Group)
dat
dat2
seden = data.frame(Group = rep("sedentary",6), Data=c(30.2,29.6,35.2,19.1,26.3,22.4))
semact = data.frame(Group = rep("semiactive",6), Data=c(29.4, 17.6, 26.4, 25.3, 22.5, 28.6))
active = data.frame(Group = rep("active",6), Data=c(17.6, 13.4, 20.3, 19.6, 15.1, 10.7))
va = data.frame(Group = rep("veryactive",6), Data=c(10.9, 13.7, 12.8, 14.7, 9.3, 12.7))
dat2 = rbind(seden, semact, active, va)
dat3 = cbind(seden$Data, semact$Data, active$Data, va$Data)
bartlett.test(dat2$Data, g = dat2$Group)
summary(aov(dat2$Data ~ dat2$Group))
boxplot(dat2$Data ~ dat2$Group)
TukeyHSD(aov(dat2$Data ~ dat2$Group))
day1 = c(5.29, 4.79, 4.85, 5.01, 5.11)
day2 = c(5.28, 4.80, 4.83, 4.99, 5.14)
t.test(day1, day2, paired = TRUE)
install.packages("psych")
library(psych)
testRetest(day1, day2)
?testRetest
day1 = c(5.29, 4.79, 4.85, 5.01, 5.11)
day2 = c(5.28, 4.80, 4.83, 4.99, 5.14)
t.test(day1, day2, paired = TRUE)
testRetest(day1, day2)
?reliability
testRetest(day1, day2)
2/16
6/16
students = c(40,46,48,41,45,44,46,43)
?t.test
t.test(students, mu=45)
0.194/2
.445/12
.445/12+.097
.445/12
0.097/.037
pre = data.frame(type= rep("pre", 5), pre)
post = data.frame(type=rep("post", 5), post)
pre
pre = c(4.9,5.3,6.2,5.4,5.2)
post = c(4.6,3.8,5.7,4.9,5.1)
pre = data.frame(type= rep("pre", 5), data =pre)
post = data.frame(type=rep("post", 5), data=post)
rbind(pre, post)
cohen.d(dd[,2],dd[,1])
dd = rbind(pre, post)
cohen.d(dd[,2],dd[,1])
dim(dd)
dd$data
dd$type
?cohen.d
cohen.d(dd, group=type)
cohen.d(dd, group=dd$type)
pre = c(4.9,5.3,6.2,5.4,5.2)
post = c(4.6,3.8,5.7,4.9,5.1)
mean(pre)
sd(pre)
mean(post)
sd(post)
students = c(40,46,48,41,45,44,46,43)
t.test(students, mu=45)
hw = c(4.2,3.8,3.6,4.4,5.1,4.1,4.0)
nhw = c(5.5,5.7,6.0,5.6,6.6,6.2,6.8)
var(hw)
var(nhw)
.25/.23
t.test(hw, nhw, var.equal=TRUE)
t.test(hw, nhw, var.equal=F)
t.test(hw, nhw, var.equal=T)
hw = c(4.2,3.8,3.6,4.4,5.1,4.1,4.0)
nhw = c(5.5,5.7,6.0,5.6,6.6,6.2,6.8)
var(hw)
var(nhw)
t.test(hw, nhw, var.equal=T)
t.test(nhw, hw, var.equal=T)
seden = data.frame(Group = rep("sedentary",6), Data=c(30.2,29.6,35.2,19.1,26.3,22.4))
semact = data.frame(Group = rep("semiactive",6), Data=c(29.4, 17.6, 26.4, 25.3, 22.5, 28.6))
active = data.frame(Group = rep("active",6), Data=c(17.6, 13.4, 20.3, 19.6, 15.1, 10.7))
va = data.frame(Group = rep("veryactive",6), Data=c(10.9, 13.7, 12.8, 14.7, 9.3, 12.7))
dat2 = rbind(seden, semact, active, va)
dat3 = cbind(seden$Data, semact$Data, active$Data, va$Data)
bartlett.test(dat2$Data, g = dat2$Group)
levene.test(dat2$Data, g=dat2$Group)
summary(aov(dat2$Data ~ dat2$Group))
boxplot(dat2$Data ~ dat2$Group)
TukeyHSD(aov(dat2$Data ~ dat2$Group))
iris$Sepal.Length
summary(lm(iris$Sepal.Length ~ iris$Sepal.Width + iris$Petal.Length + iris$Petal.Width))
summary(lm(iris$Sepal.Width ~ iris$Petal.Length + iris$Petal.Width))
aux = lm(iris$Sepal.Width ~ iris$Petal.Length + iris$Petal.Width)
aux$residuals
dim(aux$residuals)
class(aux$residuals)
as.matrix(aux$residuals)
V = as.matrix(aux$residuals)
dim(as.matrix(aux$residuals))
dim(iris$Sepal.Length)
dim(as.matrix(iris$Sepal.Length))
X1 = as.matrix(iris$Sepal.Length)
t(V) %*% X1 == t(V) %*% V
t(V) %*% X1
t(V) %*% V
summary(lm(iris$Sepal.Length ~ iris$Sepal.Width + iris$Petal.Length + iris$Petal.Width))
Y = matrix(c(1,3,6,9,16,89), nrow = 6)
X2 = matrix(c(10, 6, 3, 2, 1, 1), nrow = 6)
X3 = matrix(c(1, 6, 3, 9, 4, 7), nrow = 6)
lm(Y ~ X1 + X2 + X3)
Y = matrix(c(1,3,6,9,16), nrow = 6)
X1 = matrix(c(1,1,3,4,6,9), nrow = 6)
Y = matrix(c(1,3,6,9,16, 99), nrow = 6)
X1 = matrix(c(1,1,3,4,6,9), nrow = 6)
X2 = matrix(c(10,6,6,2,1,1), nrow = 6)
X3 = matrix(c(1,6,3,9,4,7), nrow = 6)
Y
X1
X2
X3
lm(Y ~ X1 + X2 + X3)
my.lm = lm(Y ~ X1 + X2 + X3)
my.lm$coefficients
summary(my.lm)
aux = lm(X1 ~ X2 + X3)
aux = lm(X1 ~ X2 + X3)
summary(aux)
t(X1) %*% V
X1
V
aux = lm(X1 ~ X2 + X3)
V = as.matrix(aux$residuals)
V
t(X1) %*% V
t(V) %*% V
(t(V) %*% Y) / (t(V) %*% V)
my.lm$coefficients
solve(t(X1), X1)
solve(t(X1)%*%X1)
solve(t(X1)%*%X1) %*% t(X1) %*% matrix(c(1,1,1,1,1,1) ncol = 6)
solve(t(X1)%*%X1) %*% t(X1) %*% matrix(c(1,1,1,1,1,1), ncol = 6)
solve(t(X1)%*%X1) %*% (t(X1) %*% matrix(c(1,1,1,1,1,1), ncol = 6))
t(X1)
ones = matrix(c(1,1,1,1,1,1), ncol = 6)
ones
t(X1) %*% ones
ones = matrix(c(1,1,1,1,1,1), nrow = 6)
t(X1) %*% ones
solve(t(X1)%*%X1) %*% (t(X1) %*% ones)
x1 = rnorm(1000, 0, 1)
x2 = rnorm(1000, 0, 1)
e = rnorm(1000, 0, 1)
y = 1 + x1 + x2 + e
y
x1 = as.matrix(x1)
y = as.matrix(y)
x2 = as.matrix(x2)
e = as.matrix(e)
y = as.matrix(y)
b1 = solve(t(x1) %*% x1) %*% (t(x1) %*% y)
b1
b2 = solve(t(x2) %*% x2) %*% (t(x2) %*% y)
b2
summary(lm(y ~ 1 + x1 + x2))
summary(lm(y ~ 1 + x1 + x2 +e))
cov(x1, y) / var(x1)
b1
cov(x2, y) / var(x2)
b2
b2 = solve(t(x2) %*% x2) %*% (t(x2) %*% y)
b2
library(mass)
library(MASS)
b1 = ginv(t(x1) %*% x1) %*% (t(x1) %*% y)
b1
cov(x1, y) / var(x1)
cov(x2, y) / var(x2)
b0 = cov(rep(1,1000), y) / var(rep(1,1000))
b0 = mean(y) - b1*mean(x1) - b2*mean(x2)
b0
summary(lm(y~x1+x2))
res = y - (b1*x1 + b2*x2)
b1*x1
b1
res = y - as.numeric(b1)*x1 + as.numeric(b2)*x2)
res = y - (as.numeric(b1)*x1 + as.numeric(b2)*x2)
res
sum(res)
summary(res)
res = y - (1 + as.numeric(b1)*x1 + as.numeric(b2)*x2)
summary(res)
var(res)
x1 %*% res
t(res) %*% x1
t(res) %*% x1 + t(res) %*% x2
t(res) %*% x1 + t(res) %*% x2 + t(res) %*% matrix(rep(1, 1000), ncol=1000)
summary(lm(y ~ x1 + x2 + 1))
my_lm = lm(y ~ x1 + x2 + 1)
summary(my_lm)
my_lm$residuals
summary(my_lm$residuals)
var(my_lm$residuals)
sum(my_lm$residuals)
my_lm$residuals %*% x1
res = y - (b0 + as.numeric(b1)*x1 + as.numeric(b2)*x2)
summary(res)
var(res)
res %*% x1
res
t(res) %*% x1
as.numeric(b1)
b0
res = y - (as.numeric(b0) + as.numeric(b1)*x1 + as.numeric(b2)*x2)
summary(res)
t(res) %*% x1
res = y - (as.numeric(b0) + as.numeric(b1)*x1 + as.numeric(b2)*x2)
mean(res)
var(res)
t(my_lm$residuals) %*% x1
t(res) %*% x1
sum(my_lm$residuals)
sum(res)
x1
res
t(res)
t(res) * x1
t(res) %*% x1
t(res) %*% x2
t(my_lm$residuals) %*% x1
t(my_lm$residuals) %*% x2
t(e) %*% x1
t(e) %*% x2
res = y - (as.numeric(b0) + as.numeric(b1)%*%x1 + as.numeric(b2)%*%x2)
b0 = mean(y) - 1 - b1*mean(x1) - b2*mean(x2)
res = y - (as.numeric(b0) + as.numeric(b1)*x1 + as.numeric(b2)*x2)
summary(res)
var(res)
aux = lm(x1 ~ 1 + x2)
solve(t(aux$residuals) %*% aux$residuals)
aux = lm(x1 ~ 1 + x2)
solve(t(aux$residuals) %*% aux$residuals) %*% (t(aux$residuals) %*% y)
b1
my_lm = lm(y ~ x1 + x2)
summary(my_lm)
b0 = mean(y) - b1*mean(x1) - b2*mean(x2)
b0 = mean(y) - b1*mean(x1) - b2*mean(x2); b0
b1 = cov(x1, y) / var(x1)
b1 = cov(x1, y) / var(x1); b1
b2 = cov(x2, y) / var(x2); b2
N = 1000 # sample size
y = 1 + x1 + x2 + epsilon
y = 1 + x1 + x2 + e
fit <- lm(y ~ x1 + x2)
fit$coefficients
my_lm = lm(y ~ x1 + x2)
summary(my_lm)
sum(fit$residuals)
x1 %*% fit$residuals
t(x1) %*% fit$residuals
t(my_lm$residuals) %*% x1
res = y - (as.numeric(b0) + as.numeric(b1)*x1 + as.numeric(b2)*x2)
summary(res)
var(res)
t(res)%*% x1
t(e) %*% x1
t(e) %*% x2
aux = lm(x1 ~ 1 + x2)
aux = lm(x1 ~ x2)
solve(t(aux$residuals) %*% aux$residuals) %*% (t(aux$residuals) %*% y)
b1
summary(my_lm)
fit_aux = lm(x1 ~ x2)
fit_aux$coefficients
fit2 = lm(y ~ fit_aux$residuals + 0)
fit2$coefficients
solve(t(aux$residuals) %*% aux$residuals) %*% (t(aux$residuals) %*% y)
b1 = cov(x1, y) / var(x1); b1
t(x1) %*% x1
setwd("~/Spring2019/Acct682")
